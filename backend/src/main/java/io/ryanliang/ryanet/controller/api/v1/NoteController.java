package io.ryanliang.ryanet.controller.api.v1;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.module.SimpleModule;import io.ryanliang.markdownconverter.PandocMarkdownConverter;import io.ryanliang.markdownconverter.error.MarkdownConverterException;import io.ryanliang.ryanet.model.Note;import io.ryanliang.ryanet.service.NoteService;import io.ryanliang.ryanet.util.ThrowableMap;import io.ryanliang.ryanet.util.constant.NoteAPIs;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpEntity;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import java.io.IOException;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.NoSuchElementException;@Controller@RequestMapping("/api/v1/note")public class NoteController {    private NoteService noteService;    private PandocMarkdownConverter markdownConverter;    @Autowired    public void setNoteService(NoteService noteService) {        this.noteService = noteService;    }    @Autowired    public void setMarkdownConverter(PandocMarkdownConverter markdownConverter) {        this.markdownConverter = markdownConverter;    }    // --------------    // * Get Methods *    // --------------    @GetMapping(value = "/{id}", produces = "application/json; charset=UTF-8")    @ResponseBody    public Note getNoteWithID(@PathVariable Integer id) {        return noteService.findOneByID(id);    }    @CrossOrigin // TODO: delete this    @GetMapping(value = "/list", produces = "application/json; charset=UTF-8")    @ResponseBody    public List getAllNotes(){        return noteService.findAll();    }    // --------------    // * POST Methods *    // --------------    @CrossOrigin // TODO: delete this    @PostMapping(value = "/new")    @ResponseBody    public ResponseEntity postOrUpdateNewNote(HttpEntity<String> httpEntity) {        String responseBody = httpEntity.getBody();        boolean hasSucceed = false;        ObjectMapper mapper = new ObjectMapper();        SimpleModule simpleModule = new SimpleModule();        simpleModule.addAbstractTypeMapping(Map.class, ThrowableMap.class);        mapper.registerModule(simpleModule);        TypeReference typeReference = new TypeReference<ThrowableMap<String, Object>>() {};        ThrowableMap<String, Object> dictionary = null;        try {            dictionary = mapper.readValue(responseBody, typeReference);        } catch (IOException | NoSuchElementException e) {            e.printStackTrace();            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);        }        if (dictionary != null) {            try {                @SuppressWarnings("unchecked")                ArrayList<ThrowableMap<String, Object>> notes =                        (ArrayList<ThrowableMap<String,Object>>)                                dictionary.get(NoteAPIs.NOTE.getConstantValue());                if (notes.size() > 0) {                    ThrowableMap<String, Object> firstNote = notes.get(0);                    Note note = new Note();                    String name = (String) firstNote.get(NoteAPIs.NOTE_NAME.getConstantValue());                    note.setName(name);                    String content = (String)                            firstNote.get(NoteAPIs.NOTE_CONTENT.getConstantValue()) ;                    note.setRaw(content);                    note.setCreatedDate(LocalDateTime.now());                    note.setModifiedDate(LocalDateTime.now());                    note.setHtml(markdownConverter.convert(content));                    ResponseEntity<String> responseEntity =                            new ResponseEntity<String>(note.getHtml(), HttpStatus.OK);                    return responseEntity;                }            } catch (NoSuchElementException | ClassCastException e) {                e.printStackTrace();                return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);            } catch (MarkdownConverterException e) {                e.printStackTrace();            }        }        return new ResponseEntity(HttpStatus.OK);    }}